name: "Test"

on:
  workflow_call:
    inputs:
      base_ref:
        description: 'The base ref of the pull request'
        type: string
        required: false
        default: ${{ github.event.repository.default_branch }} # По умолчанию - master
      head_ref:
        description: 'The head ref of the pull request'
        type: string
        required: false
        default: ${{ github.ref }} # По умолчанию - текущая ветка

env:
  GIT_CONFIG_GLOBAL: "/root/.gitconfig" # fix path in container (https://github.com/actions/runner/issues/2033)

jobs:

  ### LINT ###

#  lint:
#    runs-on: "ubuntu-latest"
#    container:
#      image: "ghcr.io/tarantool/sdvg-ci:0.0.1"
#    steps:
#      - uses: "actions/checkout@v4"
#
#      - name: "Run linter"
#        run: "golangci-lint run --print-issued-lines=false --out-format code-climate:lint.json,line-number --timeout 5m"
#
#      - uses: "actions/upload-artifact@v4"
#        with:
#          name: "codequality"
#          path: "lint.json"

  ### UNIT ###

#  unit:
#    runs-on: "ubuntu-latest"
#    container:
#      image: "ghcr.io/tarantool/sdvg-ci:0.0.1"
#    steps:
#      - uses: "actions/checkout@v4"
#
#      - name: "Run unit tests"
#        run: "make test/unit"

  ### COVER ###

#  cover:
#    runs-on: "ubuntu-latest"
#    container:
#      image: "ghcr.io/tarantool/sdvg-ci:0.0.1"
#    steps:
#      - uses: "actions/checkout@v4"
#
#      - name: "Measuring test coverage"
#        run: "make test/cover"
#
#      - name: "Upload coverage to Coveralls"
#        uses: "coverallsapp/github-action@v2"
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          file: "coverage.out"
#          format: "golang"

  ### PERFORMANCE ###

  performance:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: "ubuntu-latest"
    container:
      image: "ghcr.io/hoodiehuuuuu/sdvg-ci:0.0.1"
    permissions:
      pull-requests: write
      packages: read

    steps:
      - uses: "actions/checkout@v4"

      - name: "Set up Python"
        uses: "actions/setup-python@v5"
        with:
          python-version: '3.x'

      - name: "Install requirements"
        run: "make bench/prepare"

      - name: "Try to get master benchmark artifact"
        continue-on-error: true
        uses: "actions/download-artifact@v4"
        with:
          name: "benchmark-master"
          path: "./"

      - name: "Check artifact exists"
        id: "check"
        run: |
          echo "exists=$(ls benchmark-master.txt 2>/dev/null | wc -l)" >> $GITHUB_OUTPUT

      - name: "Fetch master branch"
        if: ${{ steps.check.outputs.exists == '0' }}
        uses: "actions/checkout@v4"
        with:
          ref: ${{ inputs.head_ref }}
          path: "master_branch"

      - name: "Create master benchmark"
        if: ${{ steps.check.outputs.exists == '0' }}
        working-directory: "master_branch"
        run: |
          mkdir -p ../artifacts
          make test/performance > ./benchmark-master.txt

      - name: "Upload master artifact if missing for next workflows"
        if: ${{ steps.check.outputs.exists == '0' }}
        uses: "actions/upload-artifact@v4"
        with:
          name: "benchmark-master"
          path: "./benchmark-master.txt"

      - name: "Run benchmarks on PR branch"
        run: |
          make test/performance > benchmark-pr.txt

      - name: "Compare results"
        run: |
          make bench/compare old_bench=benchmark-master.txt new_bench=benchmark-pr.txt > performance-report.md

      - uses: "mshick/add-pr-comment@v2"
        with:
          message-path: "performance-report.md"