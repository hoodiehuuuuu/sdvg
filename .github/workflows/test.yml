name: "Test"

on:
  workflow_call:
    inputs:
      base_ref:
        description: 'The base ref of the pull request'
        type: string
        required: false
        default: ${{ github.event.repository.default_branch }} # По умолчанию - master
      head_ref:
        description: 'The head ref of the pull request'
        type: string
        required: false
        default: ${{ github.ref }} # По умолчанию - текущая ветка

env:
  GIT_CONFIG_GLOBAL: "/root/.gitconfig" # fix path in container (https://github.com/actions/runner/issues/2033)

jobs:

  ### LINT ###

#  lint:
#    runs-on: "ubuntu-latest"
#    container:
#      image: "ghcr.io/tarantool/sdvg-ci:0.0.1"
#    steps:
#      - uses: "actions/checkout@v4"
#
#      - name: "Run linter"
#        run: "golangci-lint run --print-issued-lines=false --out-format code-climate:lint.json,line-number --timeout 5m"
#
#      - uses: "actions/upload-artifact@v4"
#        with:
#          name: "codequality"
#          path: "lint.json"

  ### UNIT ###

#  unit:
#    runs-on: "ubuntu-latest"
#    container:
#      image: "ghcr.io/tarantool/sdvg-ci:0.0.1"
#    steps:
#      - uses: "actions/checkout@v4"
#
#      - name: "Run unit tests"
#        run: "make test/unit"

  ### COVER ###

#  cover:
#    runs-on: "ubuntu-latest"
#    container:
#      image: "ghcr.io/tarantool/sdvg-ci:0.0.1"
#    steps:
#      - uses: "actions/checkout@v4"
#
#      - name: "Measuring test coverage"
#        run: "make test/cover"
#
#      - name: "Upload coverage to Coveralls"
#        uses: "coverallsapp/github-action@v2"
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          file: "coverage.out"
#          format: "golang"

#  ### PERFORMANCE ###
#
#  performance:
#    runs-on: "ubuntu-latest"
#    container:
#      image: "ghcr.io/hoodiehuuuuu/sdvg-ci:0.0.1"
#    steps:
#      - name: "Checkout Pull Request branch"
#        uses: "actions/checkout@v4"
#        with:
#          ref: ${{ inputs.head_ref }}
#          path: "pr_branch"
#
#      # Клонируем базовую ветку (master)
#      - name: "Checkout Base branch"
#        uses: "actions/checkout@v4"
#        with:
#          ref: ${{ inputs.base_ref }}
#          path: "base_branch"
#
#      # Запускаем бенчмарки на базовой ветке
#      - name: "Run benchmarks on base branch"
#        run: |
#          make test/performance > ../base-performance.txt
#          cat ../base-performance.txt
#        working-directory: "base_branch"
#
#      # Запускаем бенчмарки на ветке PR
#
#      - name: "Run benchmarks on PR branch"
#        run: |
#          make test/performance > ../pr-performance.txt
#          cat ../pr-performance.txt
#        working-directory: "pr_branch"
#
#      # Сравниваем результаты бенчмарков
#      - name: "Compare benchmark result"
#        if: github.event_name == 'pull_request'
#        uses: "openpgpjs/github-action-pull-request-benchmark@v1"
#        with:
#          name: 'SDVG Performance'
#          tool: 'go' # или 'pytest-benchmark' / 'go test -bench', если применимо
#          pr-benchmark-file-path: 'pr-performance.txt'
#          base-benchmark-file-path: 'base-performance.txt'
#          comment-on-alert: true
#          alert-threshold: '110%' # Пример: 10% ухудшение
#          fail-on-alert: false # Можно изменить на true, если хотите, чтобы PR падал при регрессии
#          github-token: ${{ secrets.GITHUB_TOKEN }}

  ### PERFORMANCE ###

  performance:
    runs-on: "ubuntu-latest"
    container:
      image: "ghcr.io/hoodiehuuuuu/sdvg-ci:0.0.1"
    steps:
      - name: "Checkout Pull Request branch"
        uses: "actions/checkout@v4"
        with:
          ref: ${{ inputs.head_ref }}
#          path: "pr_branch"

      # Запускаем бенчмарки на ветке PR

      - name: "Run benchmarks on PR branch"
        run: |
          make test/performance > pr-performance.txt
          cat pr-performance.txt
#        working-directory: "pr_branch"

      # Сравниваем результаты бенчмарков
      - name: "Compare benchmark result"
        if: github.event_name == 'pull_request'
        uses: "benchmark-action/github-action-benchmark@v1"
        with:
          name: 'SDVG Performance'
          tool: 'go' # или 'pytest-benchmark' / 'go test -bench', если применимо
          output-file-path: './pr-performance.txt'
#          base-benchmark-file-path: './base_branch/base-performance.txt'
          comment-on-alert: true
          alert-threshold: '110%' # Пример: 10% ухудшение
          fail-on-alert: false # Можно изменить на true, если хотите, чтобы PR падал при регрессии
          github-token: ${{ secrets.GITHUB_TOKEN }}
